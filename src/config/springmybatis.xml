<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
      http://www.springframework.org/schema/context  
      http://www.springframework.org/schema/context/spring-context.xsd  
      http://www.springframework.org/schema/mvc  
      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- 1.数据源 : DriverManagerDataSource -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/fjhserver" />
		<property name="username" value="root" />
		<property name="password" value="123456" />
	</bean>

	<!--2.配置SqlSessionFactory对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--注入数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 指定MyBatis配置文件路径,用于指定Mybatis的配置文件位置。 -->
		<property name="configLocation" value="" />
		<!--扫描sql配置文件:mapper需要的xml文件,实体类映射文件路径,这里只有一个就写死，多个可以使用mybatis/*.xml来替代 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml" />
	</bean>

	<!-- 实现了SqlSession接口的SqlSessionTemplate类,它是线程安全的，可以被多个Dao同时使用.这样我们就可以通过Spring的依赖注入在Dao中直接使用SqlSessionTemplate来编程了。 -->
	<!-- <bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"> -->
	<!-- <constructor-arg index="0" ref="sqlSessionFactory" /> -->
	<!-- </bean> -->

	<!-- 3.动态代理实现不写dao的实现,扫描Dao接口包 -->
	<bean id="MapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 给出需要扫描的Dao接口,这里的basePackage 指定了dao层接口路劲，这里的dao接口不用自己实现 -->
		<property name="basePackage" value="com.fjh.dao" />
		<!--注入SqlSessionFactory-->
		<!-- 如果只有一个数据源的话可以不用指定，但是如果有多个数据源的话必须要指定 -->
		<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /> -->
		<!--直接制定了sqlsessionTemplate名称，这个和上面的其实是一样的 -->
		<!-- <property name="sqlSessionTemplateBeanName" value="sqlSession" /> -->
	</bean>

</beans>
